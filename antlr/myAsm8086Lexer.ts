// Generated from ./grammer/myAsm8086.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class myAsm8086Lexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly NUMBER = 2;
	public static readonly OPCODE = 3;
	public static readonly REGISTER = 4;
	public static readonly EOL = 5;
	public static readonly WS = 6;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "NUMBER", "OPCODE", "REGISTER", "EOL", "WS", "A", "B", "C", "D", 
		"E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", 
		"S", "T", "U", "V", "W", "X", "Y", "Z",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "NUMBER", "OPCODE", "REGISTER", "EOL", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(myAsm8086Lexer._LITERAL_NAMES, myAsm8086Lexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return myAsm8086Lexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(myAsm8086Lexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "myAsm8086.g4"; }

	// @Override
	public get ruleNames(): string[] { return myAsm8086Lexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return myAsm8086Lexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return myAsm8086Lexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return myAsm8086Lexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\b\xBD\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x03\x02\x03" +
		"\x02\x03\x03\x06\x03G\n\x03\r\x03\x0E\x03H\x03\x03\x05\x03L\n\x03\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04V" +
		"\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05\x7F\n\x05\x03\x06\x06\x06\x82" +
		"\n\x06\r\x06\x0E\x06\x83\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03" +
		"\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C" +
		"\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03" +
		"!\x03!\x02\x02\x02\"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02" +
		"\x07\r\x02\b\x0F\x02\x02\x11\x02\x02\x13\x02\x02\x15\x02\x02\x17\x02\x02" +
		"\x19\x02\x02\x1B\x02\x02\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02%\x02" +
		"\x02\'\x02\x02)\x02\x02+\x02\x02-\x02\x02/\x02\x021\x02\x023\x02\x025" +
		"\x02\x027\x02\x029\x02\x02;\x02\x02=\x02\x02?\x02\x02A\x02\x02\x03\x02" +
		"\x1F\x05\x022;CHch\x04\x02JJjj\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x04" +
		"\x02CCcc\x04\x02DDdd\x04\x02EEee\x04\x02FFff\x04\x02GGgg\x04\x02HHhh\x04" +
		"\x02IIii\x04\x02KKkk\x04\x02LLll\x04\x02MMmm\x04\x02NNnn\x04\x02OOoo\x04" +
		"\x02PPpp\x04\x02QQqq\x04\x02RRrr\x04\x02SSss\x04\x02TTtt\x04\x02UUuu\x04" +
		"\x02VVvv\x04\x02WWww\x04\x02XXxx\x04\x02YYyy\x04\x02ZZzz\x04\x02[[{{\x04" +
		"\x02\\\\||\x02\xB2\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02" +
		"\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r" +
		"\x03\x02\x02\x02\x03C\x03\x02\x02\x02\x05F\x03\x02\x02\x02\x07U\x03\x02" +
		"\x02\x02\t~\x03\x02\x02\x02\v\x81\x03\x02\x02\x02\r\x85\x03\x02\x02\x02" +
		"\x0F\x89\x03\x02\x02\x02\x11\x8B\x03\x02\x02\x02\x13\x8D\x03\x02\x02\x02" +
		"\x15\x8F\x03\x02\x02\x02\x17\x91\x03\x02\x02\x02\x19\x93\x03\x02\x02\x02" +
		"\x1B\x95\x03\x02\x02\x02\x1D\x97\x03\x02\x02\x02\x1F\x99\x03\x02\x02\x02" +
		"!\x9B\x03\x02\x02\x02#\x9D\x03\x02\x02\x02%\x9F\x03\x02\x02\x02\'\xA1" +
		"\x03\x02\x02\x02)\xA3\x03\x02\x02\x02+\xA5\x03\x02\x02\x02-\xA7\x03\x02" +
		"\x02\x02/\xA9\x03\x02\x02\x021\xAB\x03\x02\x02\x023\xAD\x03\x02\x02\x02" +
		"5\xAF\x03\x02\x02\x027\xB1\x03\x02\x02\x029\xB3\x03\x02\x02\x02;\xB5\x03" +
		"\x02\x02\x02=\xB7\x03\x02\x02\x02?\xB9\x03\x02\x02\x02A\xBB\x03\x02\x02" +
		"\x02CD\x07.\x02\x02D\x04\x03\x02\x02\x02EG\t\x02\x02\x02FE\x03\x02\x02" +
		"\x02GH\x03\x02\x02\x02HF\x03\x02\x02\x02HI\x03\x02\x02\x02IK\x03\x02\x02" +
		"\x02JL\t\x03\x02\x02KJ\x03\x02\x02\x02KL\x03\x02\x02\x02L\x06\x03\x02" +
		"\x02\x02MN\x05\x0F\b\x02NO\x05\x15\v\x02OP\x05\x15\v\x02PV\x03\x02\x02" +
		"\x02QR\x05\'\x14\x02RS\x05+\x16\x02ST\x059\x1D\x02TV\x03\x02\x02\x02U" +
		"M\x03\x02\x02\x02UQ\x03\x02\x02\x02V\b\x03\x02\x02\x02WX\x05\x0F\b\x02" +
		"XY\x05\x1D\x0F\x02Y\x7F\x03\x02\x02\x02Z[\x05\x0F\b\x02[\\\x05%\x13\x02" +
		"\\\x7F\x03\x02\x02\x02]^\x05\x11\t\x02^_\x05\x1D\x0F\x02_\x7F\x03\x02" +
		"\x02\x02`a\x05\x11\t\x02ab\x05%\x13\x02b\x7F\x03\x02\x02\x02cd\x05\x13" +
		"\n\x02de\x05\x1D\x0F\x02e\x7F\x03\x02\x02\x02fg\x05\x13\n\x02gh\x05%\x13" +
		"\x02h\x7F\x03\x02\x02\x02ij\x05\x15\v\x02jk\x05\x1D\x0F\x02k\x7F\x03\x02" +
		"\x02\x02lm\x05\x15\v\x02mn\x05%\x13\x02n\x7F\x03\x02\x02\x02op\x05\x0F" +
		"\b\x02pq\x05=\x1F\x02q\x7F\x03\x02\x02\x02rs\x05\x11\t\x02st\x05=\x1F" +
		"\x02t\x7F\x03\x02\x02\x02uv\x05\x13\n\x02vw\x05=\x1F\x02w\x7F\x03\x02" +
		"\x02\x02xy\x05\x15\v\x02yz\x05=\x1F\x02z\x7F\x03\x02\x02\x02{|\x053\x1A" +
		"\x02|}\x05-\x17\x02}\x7F\x03\x02\x02\x02~W\x03\x02\x02\x02~Z\x03\x02\x02" +
		"\x02~]\x03\x02\x02\x02~`\x03\x02\x02\x02~c\x03\x02\x02\x02~f\x03\x02\x02" +
		"\x02~i\x03\x02\x02\x02~l\x03\x02\x02\x02~o\x03\x02\x02\x02~r\x03\x02\x02" +
		"\x02~u\x03\x02\x02\x02~x\x03\x02\x02\x02~{\x03\x02\x02\x02\x7F\n\x03\x02" +
		"\x02\x02\x80\x82\t\x04\x02\x02\x81\x80\x03\x02\x02\x02\x82\x83\x03\x02" +
		"\x02\x02\x83\x81\x03\x02\x02\x02\x83\x84\x03\x02\x02\x02\x84\f\x03\x02" +
		"\x02\x02\x85\x86\t\x05\x02\x02\x86\x87\x03\x02\x02\x02\x87\x88\b\x07\x02" +
		"\x02\x88\x0E\x03\x02\x02\x02\x89\x8A\t\x06\x02\x02\x8A\x10\x03\x02\x02" +
		"\x02\x8B\x8C\t\x07\x02\x02\x8C\x12\x03\x02\x02\x02\x8D\x8E\t\b\x02\x02" +
		"\x8E\x14\x03\x02\x02\x02\x8F\x90\t\t\x02\x02\x90\x16\x03\x02\x02\x02\x91" +
		"\x92\t\n\x02\x02\x92\x18\x03\x02\x02\x02\x93\x94\t\v\x02\x02\x94\x1A\x03" +
		"\x02\x02\x02\x95\x96\t\f\x02\x02\x96\x1C\x03\x02\x02\x02\x97\x98\t\x03" +
		"\x02\x02\x98\x1E\x03\x02\x02\x02\x99\x9A\t\r\x02\x02\x9A \x03\x02\x02" +
		"\x02\x9B\x9C\t\x0E\x02\x02\x9C\"\x03\x02\x02\x02\x9D\x9E\t\x0F\x02\x02" +
		"\x9E$\x03\x02\x02\x02\x9F\xA0\t\x10\x02\x02\xA0&\x03\x02\x02\x02\xA1\xA2" +
		"\t\x11\x02\x02\xA2(\x03\x02\x02\x02\xA3\xA4\t\x12\x02\x02\xA4*\x03\x02" +
		"\x02\x02\xA5\xA6\t\x13\x02\x02\xA6,\x03\x02\x02\x02\xA7\xA8\t\x14\x02" +
		"\x02\xA8.\x03\x02\x02\x02\xA9\xAA\t\x15\x02\x02\xAA0\x03\x02\x02\x02\xAB" +
		"\xAC\t\x16\x02\x02\xAC2\x03\x02\x02\x02\xAD\xAE\t\x17\x02\x02\xAE4\x03" +
		"\x02\x02\x02\xAF\xB0\t\x18\x02\x02\xB06\x03\x02\x02\x02\xB1\xB2\t\x19" +
		"\x02\x02\xB28\x03\x02\x02\x02\xB3\xB4\t\x1A\x02\x02\xB4:\x03\x02\x02\x02" +
		"\xB5\xB6\t\x1B\x02\x02\xB6<\x03\x02\x02\x02\xB7\xB8\t\x1C\x02\x02\xB8" +
		">\x03\x02\x02\x02\xB9\xBA\t\x1D\x02\x02\xBA@\x03\x02\x02\x02\xBB\xBC\t" +
		"\x1E\x02\x02\xBCB\x03\x02\x02\x02\b\x02HKU~\x83\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!myAsm8086Lexer.__ATN) {
			myAsm8086Lexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(myAsm8086Lexer._serializedATN));
		}

		return myAsm8086Lexer.__ATN;
	}

}

